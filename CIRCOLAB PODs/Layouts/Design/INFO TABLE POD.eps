%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.11 (Build 15A284) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 2560 913
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 2560 913
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.94901961 0.94901961 0.94901961 sc
q
0 0 2560 913 rc
1253.8064 693.65778 m
1256.7158 691.51135 l
1196.401 665.02997 l
1195.8757 668.33344 l
1251.1604 692.50104 l
h
1253.8064 693.65778 m
f
0.85882354 0.85882354 0.85882354 sc
1256.7158 691.51135 m
1253.8064 693.65778 l
1251.1604 692.50104 l
1259.3887 740.98853 l
1263.0476 713.65692 l
1244.6855 608.39935 l
1237.5 612.00421 l
1249.0521 680.07806 l
1255.2102 682.80933 l
h
1256.7158 691.51135 m
f
0.74901962 0.74901962 0.74901962 sc
1256.7158 691.51135 m
1255.2102 682.80933 l
1249.0521 680.07806 l
1197.6342 657.27295 l
1196.401 665.02997 l
h
1256.7158 691.51135 m
f
0.85882354 0.85882354 0.85882354 sc
1263.0476 713.65692 m
1259.3887 740.98853 l
1253.6864 783.58386 l
1256.5129 784.6781 l
1282.457 589.4502 l
1279.4751 590.94617 l
1264.2789 704.45959 l
h
1263.0476 713.65692 m
f
1279.4751 590.94617 m
1282.457 589.4502 l
1285.8395 587.7533 l
1217.2777 553.13007 l
1213.8998 554.961 l
1204.8442 611.92102 l
1221.7937 619.88373 l
1237.5 612.00421 l
1244.6855 608.39935 l
1247.1471 607.16443 l
h
1279.4751 590.94617 m
f
0.74901962 0.74901962 0.74901962 sc
1244.6855 608.39935 m
1263.0476 713.65692 l
1264.2789 704.45959 l
1247.1471 607.16443 l
h
1244.6855 608.39935 m
f
0.93333334 0.93333334 0.93333334 sc
1282.457 589.4502 m
1256.5129 784.6781 l
1253.6864 783.58386 l
1181.9674 755.81799 l
1195.8757 668.33344 l
1196.401 665.02997 l
1197.6342 657.27295 l
1204.8442 611.92102 l
1213.8998 554.961 l
1214.373 551.98413 l
1214.4825 551.29578 l
1206.549 547.28754 l
1171.4672 763.7793 l
1263.0131 798.63605 l
1290.224 589.56213 l
1285.8384 587.34644 l
1285.8395 587.7533 l
h
1282.457 589.4502 m
f
0.77254903 0.77254903 0.77254903 sc
1206.549 547.28754 m
1214.4825 551.29578 l
1215.082 551.59869 l
1217.3588 550.36102 l
1209.4216 546.3407 l
h
1206.549 547.28754 m
f
1285.8384 587.34644 m
1290.224 589.56213 l
1293.1263 588.7392 l
1285.8322 585.04449 l
h
1285.8384 587.34644 m
f
0.85882354 0.85882354 0.85882354 sc
1214.373 551.98413 m
1213.8998 554.961 l
1217.2777 553.13007 l
1217.3588 550.36102 l
1215.082 551.59869 l
h
1214.373 551.98413 m
f
0.77254903 0.77254903 0.77254903 sc
1263.0131 798.63605 m
1171.4672 763.7793 l
1168.4602 764.32983 l
1259.9648 799.08856 l
h
1263.0131 798.63605 m
f
0.85882354 0.85882354 0.85882354 sc
1168.4602 764.32983 m
1171.4672 763.7793 l
1206.549 547.28754 l
1208.129 537.5365 l
1230.2467 401.04648 l
1227.389 402.83591 l
1201.9772 558.72278 l
1201.4943 561.68518 l
1194.126 606.88568 l
1186.7024 652.42444 l
1186.6727 652.60675 l
1184.968 663.06372 l
1181.6169 683.62061 l
1178.1217 705.06189 l
h
1168.4602 764.32983 m
f
0.74901962 0.74901962 0.74901962 sc
1181.7828 569.70093 m
1174.9937 566.39758 l
1175.8762 572.91187 l
h
1181.7828 569.70093 m
f
0.85882354 0.85882354 0.85882354 sc
1151.1804 455.72955 m
1150.2654 456.53812 l
1165.957 578.30414 l
1166.2754 580.77478 l
1168.0624 594.64124 l
1179.8799 686.34467 l
1181.6169 683.62061 l
1184.968 663.06372 l
1156.7938 452.23215 l
h
1151.1804 455.72955 m
f
0.74901962 0.74901962 0.74901962 sc
1156.7938 452.23215 m
1184.968 663.06372 l
1186.6727 652.60675 l
1186.6445 652.39874 l
1179.5511 600.03857 l
1176.2118 575.38904 l
1175.8762 572.91187 l
1174.9937 566.39758 l
1159.7439 453.83139 l
h
1156.7938 452.23215 m
f
0.85882354 0.85882354 0.85882354 sc
1175.8762 572.91187 m
1176.2118 575.38904 l
1201.4943 561.68518 l
1201.9772 558.72278 l
1181.7828 569.70093 l
h
1175.8762 572.91187 m
f
1177.2273 690.50452 m
1175.7201 699.68787 l
1178.1217 705.06189 l
1181.6169 683.62061 l
1179.8799 686.34467 l
h
1177.2273 690.50452 m
f
0.74901962 0.74901962 0.74901962 sc
1226.5223 490.0314 m
1224.4049 488.88354 l
1224.1337 490.58908 l
1234.2322 548.47711 l
1237.0693 549.93042 l
h
1226.5223 490.0314 m
f
0.85882354 0.85882354 0.85882354 sc
1234.2322 548.47711 m
1224.1337 490.58908 l
1220.6328 512.61011 l
1226.0042 544.26221 l
h
1234.2322 548.47711 m
f
0.93333334 0.93333334 0.93333334 sc
1291.7373 577.93457 m
1308.7134 447.49969 l
1301.8602 443.44257 l
1284.4813 574.21765 l
h
1291.7373 577.93457 m
f
0.85882354 0.85882354 0.85882354 sc
1284.4813 574.21765 m
1301.8602 443.44257 l
1299.0006 445.0943 l
1281.8922 572.8913 l
h
1284.4813 574.21765 m
f
0.93333334 0.93333334 0.93333334 sc
1237.6705 405.44147 m
1230.2467 401.04648 l
1208.129 537.5365 l
1210.9949 536.57355 l
1216.3842 539.33429 l
1220.6328 512.61011 l
1224.1337 490.58908 l
1224.4049 488.88354 l
h
1237.6705 405.44147 m
f
0.85882354 0.85882354 0.85882354 sc
1208.129 537.5365 m
1206.549 547.28754 l
1209.4216 546.3407 l
1210.9949 536.57355 l
h
1208.129 537.5365 m
f
0.93333334 0.93333334 0.93333334 sc
1210.9949 536.57355 m
1209.4216 546.3407 l
1217.3588 550.36102 l
1285.8322 585.04449 l
1293.1263 588.7392 l
1294.3491 579.27252 l
1291.7373 577.93457 l
1284.4813 574.21765 l
1281.8922 572.8913 l
1237.0693 549.93042 l
1234.2322 548.47711 l
1226.0042 544.26221 l
1216.3842 539.33429 l
h
1210.9949 536.57355 m
f
0.85882354 0.85882354 0.85882354 sc
1285.8322 585.04449 m
1217.3588 550.36102 l
1217.2777 553.13007 l
1285.8395 587.7533 l
1285.8384 587.34644 l
h
1285.8322 585.04449 m
f
1153.558 585.04449 m
1153.4006 587.7533 l
1166.2754 580.77478 l
1165.957 578.30414 l
h
1153.558 585.04449 m
f
1153.4006 587.7533 m
1168.0624 594.64124 l
1166.2754 580.77478 l
h
1153.4006 587.7533 m
f
1201.4943 561.68518 m
1176.2118 575.38904 l
1179.5511 600.03857 l
1194.126 606.88568 l
h
1201.4943 561.68518 m
f
0.74901962 0.74901962 0.74901962 sc
1186.7024 652.42444 m
1186.6445 652.39874 l
1186.6727 652.60675 l
h
1186.7024 652.42444 m
f
0 i
0 0 0 sc
1253.8064 693.65778 m
1256.7158 691.51135 l
S
1255.2102 682.80933 m
1256.7158 691.51135 l
S
1175.8762 572.91187 m
1176.2118 575.38904 l
S
1263.0476 713.65692 m
1259.3887 740.98853 l
S
1279.4751 590.94617 m
1282.457 589.4502 l
S
1206.549 547.28754 m
1214.4825 551.29578 l
S
1285.8384 587.34644 m
1290.224 589.56213 l
S
1214.373 551.98413 m
1213.8998 554.961 l
S
1217.3588 550.36102 m
1285.8322 585.04449 l
S
1181.7828 569.70093 m
1174.9937 566.39758 l
S
0.5 w
1196.401 665.02997 m
1256.7158 691.51135 l
S
1 w
1186.7024 652.42444 m
1186.6445 652.39874 l
S
1150.2654 456.53812 m
1151.1804 455.72955 l
S
0.5 w
1156.7938 452.23215 m
1184.968 663.06372 l
S
1 w
1151.1804 455.72955 m
1156.7938 452.23215 l
S
1156.7938 452.23215 m
1159.7439 453.83139 l
S
1175.7201 699.68787 m
1177.2273 690.50452 l
S
1175.7201 699.68787 m
1178.1217 705.06189 l
S
1224.4049 488.88354 m
1226.5223 490.0314 l
S
1259.3887 740.98853 m
1251.1604 692.50104 l
S
1249.0521 680.07806 m
1237.5 612.00421 l
S
1226.0042 544.26221 m
1220.6328 512.61011 l
S
1226.5223 490.0314 m
1237.0693 549.93042 l
S
1247.1471 607.16443 m
1264.2789 704.45959 l
S
0.5 w
1224.1337 490.58908 m
1234.2322 548.47711 l
S
1244.6855 608.39935 m
1263.0476 713.65692 l
S
1168.4602 764.32983 m
1171.4672 763.7793 l
S
1 w
1168.4602 764.32983 m
1259.9648 799.08856 l
S
0.5 w
1171.4672 763.7793 m
1263.0131 798.63605 l
S
1 w
1259.9648 799.08856 m
1263.0131 798.63605 l
S
1263.0131 798.63605 m
1290.224 589.56213 l
S
1291.7373 577.93457 m
1308.7134 447.49969 l
S
1227.389 402.83591 m
1230.2467 401.04648 l
S
0.5 w
1301.8602 443.44257 m
1284.4813 574.21765 l
S
1282.457 589.4502 m
1256.5129 784.6781 l
S
1 w
1299.0006 445.0943 m
1281.8922 572.8913 l
S
1301.8602 443.44257 m
1299.0006 445.0943 l
S
1308.7134 447.49969 m
1301.8602 443.44257 l
S
1230.2467 401.04648 m
1237.6705 405.44147 l
S
1208.129 537.5365 m
1206.549 547.28754 l
S
1290.224 589.56213 m
1293.1263 588.7392 l
S
1208.129 537.5365 m
1210.9949 536.57355 l
S
0.5 w
1210.9949 536.57355 m
1209.4216 546.3407 l
S
1206.549 547.28754 m
1209.4216 546.3407 l
S
1 w
1293.1263 588.7392 m
1294.3491 579.27252 l
S
1153.558 585.04449 m
1153.4006 587.7533 l
S
1153.4006 587.7533 m
1168.0624 594.64124 l
S
1179.5511 600.03857 m
1194.126 606.88568 l
S
1204.8442 611.92102 m
1221.7937 619.88373 l
S
1165.957 578.30414 m
1153.558 585.04449 l
S
0.5 w
1217.3588 550.36102 m
1217.2777 553.13007 l
S
1217.2777 553.13007 m
1213.8998 554.961 l
S
1201.4943 561.68518 m
1176.2118 575.38904 l
S
1166.2754 580.77478 m
1153.4006 587.7533 l
S
1285.8395 587.7533 m
1217.2777 553.13007 l
S
1 w
1195.8757 668.33344 m
1251.1604 692.50104 l
S
1251.1604 692.50104 m
1253.8064 693.65778 l
S
1255.2102 682.80933 m
1249.0521 680.07806 l
S
1249.0521 680.07806 m
1197.6342 657.27295 l
S
1165.957 578.30414 m
1150.2654 456.53812 l
S
1177.2273 690.50452 m
1179.8799 686.34467 l
S
1179.8799 686.34467 m
1181.6169 683.62061 l
S
1256.5129 784.6781 m
1253.6864 783.58386 l
S
1253.6864 783.58386 m
1181.9674 755.81799 l
S
1214.373 551.98413 m
1214.4825 551.29578 l
S
1224.4049 488.88354 m
1237.6705 405.44147 l
S
1227.389 402.83591 m
1201.9772 558.72278 l
S
0.5 w
1206.549 547.28754 m
1171.4672 763.7793 l
S
1 w
1214.4825 551.29578 m
1215.082 551.59869 l
S
0.5 w
1209.4216 546.3407 m
1217.3588 550.36102 l
S
1 w
1216.3842 539.33429 m
1210.9949 536.57355 l
S
1285.8322 585.04449 m
1285.8384 587.34644 l
S
1285.8384 587.34644 m
1285.8395 587.7533 l
S
1217.3588 550.36102 m
1215.082 551.59869 l
S
1215.082 551.59869 m
1214.373 551.98413 l
S
1201.9772 558.72278 m
1181.7828 569.70093 l
S
1181.7828 569.70093 m
1175.8762 572.91187 l
S
1221.7937 619.88373 m
1237.5 612.00421 l
S
1166.2754 580.77478 m
1165.957 578.30414 l
S
1159.7439 453.83139 m
1174.9937 566.39758 l
S
1174.9937 566.39758 m
1175.8762 572.91187 l
S
1216.3842 539.33429 m
1220.6328 512.61011 l
S
1201.9772 558.72278 m
1201.4943 561.68518 l
S
0.5 w
1230.2467 401.04648 m
1208.129 537.5365 l
S
1 w
1279.4751 590.94617 m
1264.2789 704.45959 l
S
1264.2789 704.45959 m
1263.0476 713.65692 l
S
1259.3887 740.98853 m
1253.6864 783.58386 l
S
0.5 w
1285.8322 585.04449 m
1293.1263 588.7392 l
S
1 w
1226.0042 544.26221 m
1216.3842 539.33429 l
S
1179.8799 686.34467 m
1168.0624 594.64124 l
S
1168.0624 594.64124 m
1166.2754 580.77478 l
S
1186.6445 652.39874 m
1186.6727 652.60675 l
S
1181.9674 755.81799 m
1195.8757 668.33344 l
S
1220.6328 512.61011 m
1224.1337 490.58908 l
S
1224.1337 490.58908 m
1224.4049 488.88354 l
S
1237.5 612.00421 m
1244.6855 608.39935 l
S
1244.6855 608.39935 m
1247.1471 607.16443 l
S
1247.1471 607.16443 m
1279.4751 590.94617 l
S
1176.2118 575.38904 m
1179.5511 600.03857 l
S
1179.5511 600.03857 m
1186.6445 652.39874 l
S
1195.8757 668.33344 m
1196.401 665.02997 l
S
1201.4943 561.68518 m
1194.126 606.88568 l
S
1194.126 606.88568 m
1186.7024 652.42444 l
S
1281.8922 572.8913 m
1237.0693 549.93042 l
S
1237.0693 549.93042 m
1234.2322 548.47711 l
S
1234.2322 548.47711 m
1226.0042 544.26221 l
S
1282.457 589.4502 m
1285.8395 587.7533 l
S
1196.401 665.02997 m
1197.6342 657.27295 l
S
1186.7024 652.42444 m
1186.6727 652.60675 l
S
1186.6727 652.60675 m
1184.968 663.06372 l
S
1184.968 663.06372 m
1181.6169 683.62061 l
S
1284.4813 574.21765 m
1281.8922 572.8913 l
S
1197.6342 657.27295 m
1204.8442 611.92102 l
S
1204.8442 611.92102 m
1213.8998 554.961 l
S
1181.6169 683.62061 m
1178.1217 705.06189 l
S
1178.1217 705.06189 m
1168.4602 764.32983 l
S
1294.3491 579.27252 m
1291.7373 577.93457 l
S
1291.7373 577.93457 m
1284.4813 574.21765 l
S
ep
end
%%Trailer
%%EOF
